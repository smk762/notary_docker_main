#!/bin/bash

script_path=$(dirname $(realpath $0))

# Check branch to match with insight submodule
branch=$(git branch --show-current)

# Updating submodules
git config --file=.gitmodules submodule.komodo-install-explorer.branch ${branch}
git submodule sync
git submodule update --init --recursive --remote

# Clear old files
echo "Clearing old files..."
rm -rf ${script_path}/cli_wrappers/*-cli
rm -rf ${script_path}/docker_files/launch_files/*.sh
rm -rf ${script_path}/cli_wrappers/*

# Temp to unset docker_host_ip var
echo "Setting up .env file..."
USER_ID=$(id -u)
GROUP_ID=$(id -g)
echo "USER_ID=${USER_ID}" > .env
echo "GROUP_ID=${GROUP_ID}" >> .env

# Check if docker_coins.json exists, and if not get user to select coins group
if [ ! -f "docker_coins.json" ]; then
    echo ""
    echo "Which group of coins should be built?"
    group_one='["DOC", "MARTY", "NINJA", "PIRATE", "ZOMBIE"]'
    echo "1. ${group_one}"
    group_two='["CCL", "CLC", "GLEEC", "ILN", "KOIN"]'
    echo "2. ${group_two}"
    group_three='["THC", "MCL", 'TOKEL', "VRSC"]'
    echo "3. ${group_three}"
    group_four='["SUPERNET", "KMD", "CHIPS"]'
    echo "4. ${group_four}"
    echo ""
    read -p "Enter your choice: " group

    case "$group" in
    "1")
        echo "${group_one}" > docker_coins.json
        ;;
    "2")
        echo "${group_two}" > docker_coins.json
        ;;
    "3")
        echo "${group_three}" > docker_coins.json
        ;;
    "4")
        echo "${group_four}" > docker_coins.json
        ;;
    *)
        echo "Invalid choice, exiting"
        exit
        ;;
    esac
fi

# Update repo
echo "Updating repository..."
git pull || sleep 5 # This sleep is for letting the user see errors when git pull fails

# Creating launch files for daemons and explorers
echo "Setting up launch files..."
./configure.py launch_files

# Setting up daemon conf files
echo "Setting up conf files..."
./configure.py daemon_confs

# Generate service blocks for each daemon and explorer in docker-compose.yaml
echo "Updating docker-compose.yml..."
./configure.py yaml
sed "s/USERNAME/${USER}/gi" -i "docker-compose.yml"

# Setting up cli wrappers for wach daemon
echo "Setting up cli wrappers..."
./configure.py clis

# Use the `nobuild` argument to skip building docker images
if [[ "$1" == "nobuild" ]]; then
    echo "Not building docker images..."
elif [ -z "$1" ]; then
    echo "Building docker images..."
    docker compose build $@ 
    ./stop
else
    echo "Building docker image: $1"
    docker compose build $1 $@ 
    ./stop $1
fi

mkdir -p /home/${USER}/cli-wrappers
echo "PATH=$PATH:/home/${USER}/cli-wrappers" >> /home/${USER}/.bashrc
for file in ${script_path}/cli_wrappers/*-cli; do
    f=$(basename ${file})
    ln -sf ${script_path}/cli_wrappers/${f} /home/${USER}/cli-wrappers/${f}
done

echo "Done!"
echo "Use ./start to launch your daemons..."
echo "To setup SSL certificates, run ./setup_ssl"
